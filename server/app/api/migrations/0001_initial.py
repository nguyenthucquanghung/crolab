# Generated by Django 3.2.8 on 2021-12-06 17:56

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=100)),
                ('full_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('gender', models.SmallIntegerField(choices=[(0, 'Female'), (1, 'Male'), (2, 'Non Binary')])),
                ('year_of_birth', models.IntegerField()),
                ('role', models.SmallIntegerField(choices=[(0, 'Admin'), (1, 'Requester'), (2, 'Annotator')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.IntegerField(default=0)),
                ('mean_accuracy', models.IntegerField(default=0)),
                ('label_c', models.IntegerField(default=0)),
                ('task_c', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.SmallIntegerField(choices=[(0, 'Speech To Text'), (1, 'Document Classification')])),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=1000)),
                ('unit_qty', models.IntegerField()),
                ('truth_qty', models.IntegerField()),
                ('shared_qty', models.IntegerField()),
                ('min_qty', models.IntegerField()),
                ('accepted_qty', models.IntegerField()),
                ('unit_wage', models.IntegerField()),
                ('unit_bonus', models.IntegerField()),
                ('accept_threshold', models.IntegerField()),
                ('bonus_threshold', models.IntegerField()),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'job',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_qty', models.IntegerField()),
                ('accepted', models.BooleanField(default=False)),
                ('passed', models.BooleanField(default=False)),
                ('rejected', models.BooleanField(default=False)),
                ('shared_accuracy', models.IntegerField()),
                ('truth_accuracy', models.IntegerField()),
                ('annotator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
            ],
            options={
                'db_table': 'task',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(max_length=1000)),
                ('label', models.CharField(max_length=1000)),
                ('assigned', models.BooleanField(default=False)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.task')),
            ],
            options={
                'db_table': 'unit',
            },
        ),
        migrations.CreateModel(
            name='TruthUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(max_length=1000)),
                ('label', models.CharField(max_length=1000)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
            ],
            options={
                'db_table': 'truth_unit',
            },
        ),
        migrations.CreateModel(
            name='TruthLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=1000)),
                ('accuracy', models.IntegerField()),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.task')),
                ('truth_unit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.truthunit')),
            ],
            options={
                'db_table': 'truth_label',
            },
        ),
        migrations.CreateModel(
            name='SharedUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(max_length=1000)),
                ('mean_value', models.CharField(max_length=1000)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
            ],
            options={
                'db_table': 'shared_unit',
            },
        ),
        migrations.CreateModel(
            name='SharedLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=1000)),
                ('accuracy', models.IntegerField()),
                ('shared_unit', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.sharedunit')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.task')),
            ],
            options={
                'db_table': 'shared_label',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=1000)),
                ('rating', models.IntegerField()),
                ('ratee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.task')),
            ],
            options={
                'db_table': 'rating',
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank_category', models.SmallIntegerField(verbose_name=[(0, 'Requester'), (1, 'Annotator'), (2, 'Annotator Speech To Text'), (3, 'Annotator Document Classification')])),
                ('offset', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rank',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=1000)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment',
            },
        ),
        migrations.CreateModel(
            name='ClassificationLabelType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=1000)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.job')),
            ],
            options={
                'db_table': 'classification',
            },
        ),
    ]
